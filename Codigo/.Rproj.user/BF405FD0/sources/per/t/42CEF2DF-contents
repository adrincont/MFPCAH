#.============================================================================.#
#                   [ Lectura de bases de datos ]                             .#
#.============================================================================.#
# {Lectura de librerias} ==================================================.####
# Operaciones con datos funcionales
library(fda.usc)
library(fda)
library(MFPCA)
# pca vectorial
library(factoextra)
library(FactoMineR)
# Graficas
library(ggplot2)
library(dplyr)
require(GGally)
library(patchwork)
# Tratamiento de datos
library(R.matlab)
library(gridExtra)
library(readxl)
# {Funciones auxiliares} ==================================================.####
# Grafica para datos funcionales
plot_func = function(FunData, name_x = 'x', name_y = 'y', class = NULL){
  plt = list()
  fig = list()
  if (class(FunData) == 'funData') {FunData = list(FunData)}
  if (!is.null(class)) {class = data.frame(id = 1:length(class),class)}
  for (i in 1:length(FunData)) {
    X = FunData[[i]]@X
    colnames(X) = FunData[[i]]@argvals[[1]]
    rownames(X) = seq(1:nrow(X))
    plt[[i]] = as.data.frame.table(X)
    colnames(plt[[i]]) = c('id', 'x', 'y')
    if (!is.null(class)) {
      plt[[i]] = merge(plt[[i]],class,by = 'id',all.y = TRUE)
    }
    plt[[i]]$x = as.numeric(as.character(plt[[i]]$x))
    fig[[i]] = ggplot(plt[[i]], aes(x, y, fill = id)) + theme_bw() +
      xlab(name_x) + ylab(paste(name_y, '(V', i, ')'))
    if (is.null(class)){
      fig[[i]] = fig[[i]] + geom_line(aes(color = id), show.legend = FALSE)
    }else{
      fig[[i]] = fig[[i]] + geom_line(aes(color = class))
    }
  }
  if (length(fig) > 1) {return(Reduce(`+`, fig))}
  else {return(fig[[1]])}
}
# Matriz de graficos para variables vectoriales
ggpairs_2 = function(data){
  my_fn = function(data, mapping, ...){
    p = ggplot(data = data, mapping = mapping) +
      geom_point() +
      geom_smooth(method = loess, fill = 'red', color = 'red', ...) +
      geom_smooth(method = lm, fill = 'blue', color = 'blue', ...)
    p
  }
  return(ggpairs(data, lower = list(continuous = my_fn)))
}
# {Codigo} ================================================================.####
## {datos granos 1} -------------------------------------------------------.####
# caseína, glucosa, lactato y humedad (wt%) a partir 
# de NIR (117 longitudes de onda, 1104 a 2495 nm) 
data_1 = readMat('Datos_eig_1/CGL_nir.mat')
# "X = NIR 117 wavelengths, 1104 to 2496 nm                       "
# "Y = Grain protein: casein, glucose, lactate and moisture (wt %)"
# "231 samples in full 3 component mixture design    
dat_1 = list()
## Parte funcional
dat_1$X = data_1$Xcal$data
dimnames(dat_1$X)[[1]] = seq(1,153)
dimnames(dat_1$X)[[2]] = seq(1104,2496,len = 117)
dat_1$fun = fdata(dat_1$X,argvals = seq(1104,2496,len = 117))
dat_1$fun1 = fdata.deriv(dat_1$fun)
dat_1$fun = funData(dat_1$fun$argvals,dat_1$fun$data)
dat_1$fun1 = funData(dat_1$fun1$argvals,dat_1$fun1$data)
dat_1$fmult = multiFunData(list(dat_1$fun,dat_1$fun1))
plot_func(dat_1$fmult)
## Parte vectorial
dat_1$y = data_1$Ycal$data
colnames(dat_1$y) = c("caseina", "glucosa", "lactato", "humedad")
ggpairs_2(as.data.frame(dat_1$y))
## {datos maiz} -----------------------------------------------------------.####
data_2 = readMat('Datos_eig_2/corn.mat')
data_2$information
dat_2 = list()
## Parte funcional
dat_2$X_1 = data_2$m5spec$data
dat_2$X_2 = data_2$mp5spec$data
dat_2$X_3 = data_2$mp6spec$data
dimnames(dat_2$X_1)[[2]] = seq(1100,2498,2)
dimnames(dat_2$X_2)[[2]] = seq(1100,2498,2)
dimnames(dat_2$X_3)[[2]] = seq(1100,2498,2)
dat_2$fun_1 = funData(seq(1100,2498,2),dat_2$X_1)
dat_2$fun_2 = funData(seq(1100,2498,2),dat_2$X_2)
dat_2$fun_3 = funData(seq(1100,2498,2),dat_2$X_3)
dat_2$fmult = multiFunData(list(dat_2$fun_1,dat_2$fun_2,dat_2$fun_3))
plot_func(dat_2$fmult)
## Parte vectorial
dat_2$y = data_2$propvals$data
colnames(dat_1$y) = c("humedad","aceite","proteína","almidon")
ggpairs_2(as.data.frame(dat_2$y))
## {Aceites de oliva} -----------------------------------------------------.####
dat_3 = list()
## Parte funcional
# 187 espectros que comprende 612 longitudes de onda, de 1000 a 2222 nm pir.csv (1,0 MB);
dat_i = read.csv("Datos_chem_1/pir.csv",sep = ";")
dat_3$X1 = as.matrix(dat_i[,-1])
args_i = as.numeric(gsub("X", "", colnames(dat_i)[-1]))
dat_3$fun = fdata(dat_3$X1,argvals = args_i)
dat_3$fun1 = fdata.deriv(dat_3$fun)
dat_3$fun = funData(dat_3$fun$argvals,dat_3$fun$data)
dat_3$fun1 = funData(dat_3$fun1$argvals,dat_3$fun1$data)
dat_3$fmult = multiFunData(list(dat_3$fun,dat_3$fun1))
plot_func(dat_3$fmult)
## Parte vectorial
# 14 ácidos grasos y escualeno en las 187 muestras: ags.csv (15.2kB);
dat_i = read.csv("Datos_chem_1/ags.csv",sep = ";")
dat_3$y1 = as.data.frame(dat_i[,-1])
ggpairs_2(dat_3$y1)
# Análisis de 19 triglicéridos de las 187 muestras: tri.csv (20.2kB); 
dat_i = read.csv("Datos_chem_1/tri.csv",sep = ";")
dat_3$y2 = as.data.frame(dat_i[,-1])
ggpairs_2(dat_3$y2)
## {tecator} --------------------------------------------------------------.####
dat_4 = list()
## Parte funcional
data('tecator')
datos = funData(tecator$absorp.fdata$argvals, tecator$absorp.fdata$data)
datos_fd = funData2fd(datos)
datos_fd_0 = fdata.deriv(datos_fd,nderiv = 0)
datos_fd_1 = fdata.deriv(datos_fd,nderiv = 1)
datos_0 = funData(datos_fd_0$argvals,datos_fd_0$data)
datos_1 = funData(datos_fd_1$argvals,datos_fd_1$data)
multy_fda = multiFunData(list(datos_0,datos_1))
dat_4$fmult = multy_fda
plot_func(dat_4$fmult)
## Parte vectorial
dat_4$y = as.data.frame(tecator$y)
ggpairs_2(dat_4$y)
## {Azucar} ---------------------------------------------------------------.####
data_i = readMat('data.mat')
dat_5 = list()
## Parte funcional
Fluerecencia = array(dim = c(571,268,7))
for (i in 1:7) {
  Fluerecencia[,,i] = t(data_i$X[,seq(571*(i-1)+1,571*(i),1)])
}
for (i in 1:7) {
  dat_5[[paste0("X",i)]] = t(Fluerecencia[,,i])
  args_i = seq(275,560,0.5)
  dat_5[[paste0("fun",i)]] = funData(args_i,dat_5[[paste0("X",i)]])
}
dat_5$fmult = multiFunData(dat_5[paste0("fun",1:7)])
plot_func(dat_5$fmult)
## Parte vectorial
Calidad = as.data.frame(data_i$y)[,-1]
colnames(Calidad) = c('ceniza','color')
ggpairs_2(Calidad)
# Mediciones de laboratorio
Pros = data_i$Proc[,seq(39*(1-1)+1,39*(1),1)]
list_NA = apply(Pros,MARGIN = 2,function(x){return(sum(is.na(x)))})/268
Pros = as.data.frame(Pros[,list_NA < 0.05])[-c(1,2,3)]
Pros = mutate_all(Pros,~ifelse(is.na(.x), mean(.x, na.rm = TRUE), .x))
ggpairs_2(Pros)
# {Datos3 papers} ---------------------------------------------------------.####
Data3_paper = read_excel("Data3 _paper.xlsx")



